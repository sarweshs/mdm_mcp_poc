package com.mdm.mcp.rules;

import com.mdm.mcp.model.Entity;
import com.mdm.mcp.model.MergeResult;
import com.mdm.mcp.service.RuleExecutionContext;
import java.util.UUID;

// Merge rules for combining matched entities
rule "Merge High Confidence Matches"
    when
        $context: RuleExecutionContext()
        $matchCandidate: MatchCandidate(confidenceScore >= 0.9) from $context.getMatchCandidates()
    then
        // Create merged entity
        Entity mergedEntity = new Entity();
        mergedEntity.setEntityId("MERGED_" + UUID.randomUUID().toString());
        mergedEntity.setEntityType($matchCandidate.getEntity1().getEntityType());
        mergedEntity.setStatus("ACTIVE");
        mergedEntity.setConfidenceScore($matchCandidate.getConfidenceScore());
        
        // Apply survivorship rules
        applySurvivorshipRules($matchCandidate.getEntity1(), $matchCandidate.getEntity2(), mergedEntity);
        
        // Mark source entities as merged
        $matchCandidate.getEntity1().setStatus("MERGED");
        $matchCandidate.getEntity2().setStatus("MERGED");
        
        // Create merge result
        MergeResult result = MergeResult.builder()
            .mergeId(UUID.randomUUID().toString())
            .status("SUCCESS")
            .message("Entities merged successfully")
            .sourceEntityIds(Arrays.asList($matchCandidate.getEntity1().getEntityId(), 
                                         $matchCandidate.getEntity2().getEntityId()))
            .mergedEntityId(mergedEntity.getEntityId())
            .duplicateEntityIds(Arrays.asList($matchCandidate.getEntity1().getEntityId(), 
                                            $matchCandidate.getEntity2().getEntityId()))
            .appliedRuleName("Merge High Confidence Matches")
            .confidenceScore($matchCandidate.getConfidenceScore())
            .timestamp(java.time.LocalDateTime.now())
            .build();
        
        $context.addMergeResult(result);
        $context.addMergedEntity(mergedEntity);
end

rule "Merge Medium Confidence Matches with Manual Review"
    when
        $context: RuleExecutionContext()
        $matchCandidate: MatchCandidate(confidenceScore >= 0.7 && confidenceScore < 0.9) from $context.getMatchCandidates()
    then
        // Create merge result for manual review
        MergeResult result = MergeResult.builder()
            .mergeId(UUID.randomUUID().toString())
            .status("PENDING_REVIEW")
            .message("Medium confidence match requires manual review")
            .sourceEntityIds(Arrays.asList($matchCandidate.getEntity1().getEntityId(), 
                                         $matchCandidate.getEntity2().getEntityId()))
            .appliedRuleName("Merge Medium Confidence Matches")
            .confidenceScore($matchCandidate.getConfidenceScore())
            .timestamp(java.time.LocalDateTime.now())
            .build();
        
        $context.addMergeResult(result);
end

rule "Reject Low Confidence Matches"
    when
        $context: RuleExecutionContext()
        $matchCandidate: MatchCandidate(confidenceScore < 0.7) from $context.getMatchCandidates()
    then
        // Create merge result for rejection
        MergeResult result = MergeResult.builder()
            .mergeId(UUID.randomUUID().toString())
            .status("REJECTED")
            .message("Low confidence match rejected")
            .sourceEntityIds(Arrays.asList($matchCandidate.getEntity1().getEntityId(), 
                                         $matchCandidate.getEntity2().getEntityId()))
            .appliedRuleName("Reject Low Confidence Matches")
            .confidenceScore($matchCandidate.getConfidenceScore())
            .timestamp(java.time.LocalDateTime.now())
            .build();
        
        $context.addMergeResult(result);
end

// Helper function to apply survivorship rules
function void applySurvivorshipRules(Entity entity1, Entity entity2, Entity mergedEntity) {
    // Copy all attributes from both entities
    mergedEntity.getAttributes().putAll(entity1.getAttributes());
    mergedEntity.getAttributes().putAll(entity2.getAttributes());
    
    // Apply survivorship rules for conflicting attributes
    applySurvivorshipRule("email", entity1, entity2, mergedEntity, "HIGHEST_CONFIDENCE");
    applySurvivorshipRule("phoneNumber", entity1, entity2, mergedEntity, "MOST_RECENT");
    applySurvivorshipRule("address", entity1, entity2, mergedEntity, "MOST_COMPLETE");
    applySurvivorshipRule("fullName", entity1, entity2, mergedEntity, "MOST_COMPLETE");
    
    // Merge relationships
    mergedEntity.getRelationships().putAll(entity1.getRelationships());
    mergedEntity.getRelationships().putAll(entity2.getRelationships());
}

function void applySurvivorshipRule(String attributeName, Entity entity1, Entity entity2, Entity mergedEntity, String rule) {
    String value1 = entity1.getAttributes().get(attributeName);
    String value2 = entity2.getAttributes().get(attributeName);
    
    if (value1 != null && value2 != null && !value1.equals(value2)) {
        String selectedValue = null;
        
        switch (rule) {
            case "HIGHEST_CONFIDENCE":
                selectedValue = entity1.getConfidenceScore() > entity2.getConfidenceScore() ? value1 : value2;
                break;
            case "MOST_RECENT":
                selectedValue = entity1.getUpdatedAt().isAfter(entity2.getUpdatedAt()) ? value1 : value2;
                break;
            case "MOST_COMPLETE":
                selectedValue = value1.length() > value2.length() ? value1 : value2;
                break;
            default:
                selectedValue = value1; // Default to first entity
        }
        
        mergedEntity.getAttributes().put(attributeName, selectedValue);
    }
} 